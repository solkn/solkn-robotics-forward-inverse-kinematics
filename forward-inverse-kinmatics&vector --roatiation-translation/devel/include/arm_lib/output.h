// Generated by gencpp from file arm_lib/output.msg
// DO NOT EDIT!


#ifndef ARM_LIB_MESSAGE_OUTPUT_H
#define ARM_LIB_MESSAGE_OUTPUT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arm_lib
{
template <class ContainerAllocator>
struct output_
{
  typedef output_<ContainerAllocator> Type;

  output_()
    : x_n(0.0)
    , y_n(0.0)
    , z_n(0.0)  {
    }
  output_(const ContainerAllocator& _alloc)
    : x_n(0.0)
    , y_n(0.0)
    , z_n(0.0)  {
  (void)_alloc;
    }



   typedef double _x_n_type;
  _x_n_type x_n;

   typedef double _y_n_type;
  _y_n_type y_n;

   typedef double _z_n_type;
  _z_n_type z_n;





  typedef boost::shared_ptr< ::arm_lib::output_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_lib::output_<ContainerAllocator> const> ConstPtr;

}; // struct output_

typedef ::arm_lib::output_<std::allocator<void> > output;

typedef boost::shared_ptr< ::arm_lib::output > outputPtr;
typedef boost::shared_ptr< ::arm_lib::output const> outputConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arm_lib::output_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arm_lib::output_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arm_lib::output_<ContainerAllocator1> & lhs, const ::arm_lib::output_<ContainerAllocator2> & rhs)
{
  return lhs.x_n == rhs.x_n &&
    lhs.y_n == rhs.y_n &&
    lhs.z_n == rhs.z_n;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arm_lib::output_<ContainerAllocator1> & lhs, const ::arm_lib::output_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arm_lib

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::arm_lib::output_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_lib::output_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_lib::output_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_lib::output_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_lib::output_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_lib::output_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arm_lib::output_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2928615e848c3a6d1204cc91f0148376";
  }

  static const char* value(const ::arm_lib::output_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2928615e848c3a6dULL;
  static const uint64_t static_value2 = 0x1204cc91f0148376ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_lib::output_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arm_lib/output";
  }

  static const char* value(const ::arm_lib::output_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arm_lib::output_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x_n\n"
"float64 y_n\n"
"float64 z_n\n"
;
  }

  static const char* value(const ::arm_lib::output_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arm_lib::output_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_n);
      stream.next(m.y_n);
      stream.next(m.z_n);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct output_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_lib::output_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arm_lib::output_<ContainerAllocator>& v)
  {
    s << indent << "x_n: ";
    Printer<double>::stream(s, indent + "  ", v.x_n);
    s << indent << "y_n: ";
    Printer<double>::stream(s, indent + "  ", v.y_n);
    s << indent << "z_n: ";
    Printer<double>::stream(s, indent + "  ", v.z_n);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARM_LIB_MESSAGE_OUTPUT_H
